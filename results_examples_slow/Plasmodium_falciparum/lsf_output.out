Sender: LSF System <lsf@node1680>
Subject: Job 3597270: <autocorr> Done

Job <autocorr> was submitted from host <nickel> by user <evahoop> in cluster <cromwell>.
Job was executed on host(s) <node1680>, in queue <compbio-week>, as user <evahoop> in cluster <cromwell>.
</home/unix/evahoop> was used as the home directory.
</home/unix/evahoop/work/embl_cds-nov2014analysis/codon_autocorrelation_2015/SELECTED_SPECIES_for_EXEMPLIFYING/genomes/allAA/Pfalciparum3d7> was used as the working directory.
Started at Thu May  7 17:49:37 2015
Results reported at Thu May  7 21:48:34 2015

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input
#!/bin/bash -l

#!/bin/bash -l
#BSUB -q compbio-week
#BSUB -o lsf_output.out
#BSUB -R "rusage[mem=8]"
#BSUB -J autocorr

use R-3.0

input_fasta="Pfalciparum3d7_plasmodb6.1_broad_CDS.fasta"

# 1. Build total_codons and paired_codons from fasta
~/work/embl_cds-nov2014analysis/codon_autocorrelation_2015/scripts/codon_autocorrelation_multiple_sequences.ALL_AA.codonVSotherAAbox.py $input_fasta DNA

# 2. Build merged from total_codons and paired_codons
~/work/embl_cds-nov2014analysis/codon_autocorrelation_2015/scripts/parse_codon_autocorrelation_output_ALLaminoacids.sh $input_fasta.paired_codons $input_fasta.total_codons

# 3. Fix merged with missing pairs
~/work/embl_cds-nov2014analysis/codon_autocorrelation_2015/scripts/fix_merged_file_codon_autocorrelation_counts_ALLaminoacids.sh $input_fasta.codon_counts.merged;                                                                     

# 4. Build R code with specific input and get SDEVS and plots 
cat ~/work/embl_cds-nov2014analysis/codon_autocorrelation_2015/scripts/parse_codon_autocorrelation_merged_ALLaminoacids_RSCPU_4096.R | sed "s/INPUTFILE/$input_fasta.codon_counts.merged.FIXED/g" > $input_fasta.codon_counts.merged.FIXED.R
R --save < $input_fasta.codon_counts.merged.FIXED.R
                                           
## 5. Build pasted RSCPU
#echo ""> tmp;  for i in `ls | grep "txt$" | grep way1`; do paste $i tmp > tmp2; mv tmp2 tmp; done; cat tmp | sed 's/\.codon_counts\.merged\.FIXED\.ALLaminoacids_for_synonymous//g' > rscpu_way1.pasted; rm tmp
#echo ""> tmp;  for i in `ls | grep "txt$" | grep way2`; do paste $i tmp > tmp2; mv tmp2 tmp; done; cat tmp | sed 's/\.codon_counts\.merged\.FIXED\.ALLaminoacids_for_synonymous//g' > rscpu_way2.pasted; rm tmp








------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time   :  14380.07 sec.
    Max Memory :      3452 MB
    Max Swap   :      3722 MB

    Max Processes  :         9
    Max Threads    :        10

The output (if any) follows:


Short extract of results to validate the run

	Codons in first sequence ['ATG', 'ACT', 'TTG', 'ATA', 'AGG', 'AAA', 'GTG', 'AAG', 'AAG', 'AAT', 'GTT', 'TTA', 'CAA', 'ACA', 'TTT', 'AGG', 'GAA', 'TTA', 'TAT', 'AAT', 'CGA', 'GGA', 'AAA', 'CAA', 'CTG', 'AAC', 'ATA', 'CAC', 'AAA', 'ACA', 'ACA', 'TTT', 'TTA', 'AGT', 'CAA', 'ACA', 'TAT', 'GAA', 'AAA', 'AAT', 'TGT', 'TGG', 'AGA', 'AAA', 'ACA', 'AGA', 'CTT', 'CGA', 'GAA', 'GAA', 'AAA', 'GTA', 'TAT', 'CAT', 'AAA', 'AAA', 'TAC', 'AAA', 'TTT', 'TTA', 'AAA', 'CAT', 'GCT', 'TAT', 'GAT', 'GTA', 'GTA', 'AAT', 'TAT', 'GGA', 'ATT', 'GAT', 'AAA', 'AAA', 'TTA', 'AAA', 'TTT', 'CAA', 'ATT', 'GAG', 'GAA', 'AAA', 'AAT', 'ATA', 'ATT', 'GAA', 'GAA', 'GAC', 'TCA', 'TAT', 'TTA', 'CCT', 'GAC', 'CAA', 'GCC', 'AAT', 'ATT', 'ATA', 'CCA', 'AAT', 'GAA', 'AAA', 'AGC', 'ATT', 'AAA', 'AAA', 'AAT', 'GTT', 'AAT', 'CAT', 'ATT', 'GAT', 'AAT', 'GAA', 'AGA', 'AAA', 'GAT', 'ATT', 'TTA', 'AAT', 'TAT', 'TTA', 'GAA', 'AAT', 'ATG', 'AAC', 'AGT', 'AAA', 'TAT', 'AAT', 'AAA', 'AAT', 'TAT', 'AAA', 'CAA', 'ATT', 'TCA', 'CAA', 'TTA', 'TAT', 'TAT', 'AAT', 'GTA', 'ATG', 'AAT', 'AAA', 'AAT', 'ATT', 'ATA', 'TTA', 'AAA', 'AAA', 'AAC', 'GAA', 'TTT', 'TTA', 'AAA', 'AAA', 'TAT', 'AAA', 'AAT', 'TTC', 'TAT', 'AGC', 'CCT', 'ACG', 'GAT', 'TTA', 'ACT', 'ATA', 'ATT', 'TAT', 'TAT', 'TAT', 'TTG', 'AAG', 'AAA', 'TTT', 'CAG', 'TTA', 'TTG', 'ACT', 'AAT', 'AAA', 'AAA', 'AAA', 'CAC', 'TTA', 'TCT', 'AAT', 'AAA', 'ATT', 'CAA', 'ATA', 'TTA', 'AAT', 'TCT', 'AGA', 'AAA', 'AAT', 'GTT', 'TTT', 'GAC', 'AAA', 'GTT', 'AAT', 'TAT', 'TCA', 'TTC', 'TCC', 'TTA', 'CGT', 'AAG', 'TTA', 'GAA', 'GAT', 'ATG', 'TTT', 'TAT', 'ACC', 'CAC', 'GGT', 'AAA', 'AAG', 'ATA', 'AAT', 'GTC', 'TTA', 'TAA']
	Codons in last sequence ['ATG', 'AAC', 'TTT', 'TAC', 'TCT', 'ATT', 'AAT', 'TTA', 'GTT', 'AAA', 'GCA', 'CAC', 'TTA', 'ATA', 'AAT', 'TAC', 'CCA', 'TGT', 'CCA', 'TTG', 'AAC', 'ATA', 'AAC', 'TTT', 'TTA', 'TGG', 'AAT', 'TAC', 'GGA', 'TTC', 'CTT', 'TTA', 'GGA', 'ATA', 'ATA', 'TTT', 'TTT', 'ATT', 'CAA', 'ATT', 'ATA', 'ACA', 'GGT', 'GTA', 'TTT', 'TTA', 'GCA', 'AGT', 'CGA', 'TAT', 'ACA', 'CCA', 'GAT', 'GTT', 'TCA', 'TAT', 'GCA', 'TAT', 'TAT', 'AGT', 'ATA', 'CAA', 'CAC', 'ATT', 'TTA', 'AGA', 'GAA', 'TTA', 'TGG', 'AGT', 'GGA', 'TGG', 'TGT', 'TTT', 'AGA', 'TAC', 'ATG', 'CAC', 'GCA', 'ACA', 'GGT', 'GCT', 'TCT', 'CTT', 'GTA', 'TTT', 'TTA', 'TTA', 'ACA', 'TAT', 'CTT', 'CAT', 'ATT', 'TTA', 'AGA', 'GGA', 'TTA', 'AAT', 'TAC', 'TCA', 'TAT', 'ATG', 'TAT', 'TTA', 'CCA', 'TTA', 'TCA', 'TGG', 'ATA', 'TCT', 'GGA', 'TTG', 'ATT', 'TTA', 'TTT', 'ATG', 'ATA', 'TTT', 'ATT', 'GTA', 'ACT', 'GCT', 'TTC', 'GTT', 'GGT', 'TAT', 'GTC', 'TTA', 'CCA', 'TGG', 'GGT', 'CAA', 'ATG', 'AGT', 'TAT', 'TGG', 'GGT', 'GCA', 'ACT', 'GTA', 'ATT', 'ACT', 'AAC', 'TTG', 'TTA', 'TCC', 'TCT', 'ATT', 'CCA', 'GTA', 'GCA', 'GTA', 'ATT', 'TGG', 'ATA', 'TGT', 'GGA', 'GGA', 'TAT', 'ACT', 'GTG', 'AGT', 'GAT', 'CCT', 'ACA', 'ATA', 'AAA', 'CGA', 'TTT', 'TTT', 'GTA', 'CTA', 'CAT', 'TTT', 'ATC', 'TTA', 'CCA', 'TTT', 'ATT', 'GGA', 'TTA', 'TGT', 'ATT', 'GTA', 'TTT', 'ATA', 'CAT', 'ATA', 'TTT', 'TTC', 'TTA', 'CAT', 'TTA', 'CAT', 'GGT', 'AGC', 'ACA', 'AAT', 'CCT', 'TTA', 'GGG', 'TAT', 'GAT', 'ACA', 'GCA', 'TTA', 'AAA', 'ATA', 'CCC', 'TTT', 'TAT', 'CCA', 'AAT', 'CTA', 'TTA', 'AGT', 'CTT', 'GAT', 'GTT', 'AAA', 'GGA', 'TTT', 'AAT', 'AAT', 'GTT', 'ATA', 'ATT', 'TTA', 'TTT', 'CTA', 'ATA', 'CAA', 'AGT', 'TTA', 'TTT', 'GGA', 'ATT', 'ATA', 'CCT', 'TTA', 'TCA', 'CAT', 'CCT', 'GAT', 'AAT', 'GCT', 'ATC', 'GTA', 'GTA', 'AAT', 'ACA', 'TAT', 'GTT', 'ACT', 'CCA', 'TCT', 'CAA', 'ATT', 'GTA', 'CCT', 'GAA', 'TGG', 'TAC', 'TTT', 'CTA', 'CCA', 'TTT', 'TAT', 'GCA', 'ATG', 'TTA', 'AAA', 'ACT', 'GTT', 'CCA', 'AGT', 'AAA', 'CCA', 'GCT', 'GGT', 'TTA', 'GTA', 'ATT', 'GTA', 'TTA', 'TTA', 'TCA', 'TTA', 'CAA', 'TTA', 'TTA', 'TTC', 'TTA', 'TTA', 'GCA', 'GAA', 'CAA', 'AGA', 'AGT', 'TTA', 'ACA', 'ACT', 'ATA', 'ATT', 'CAA', 'TTT', 'AAA', 'ATG', 'ATT', 'TTT', 'GGT', 'GCT', 'AGA', 'GAT', 'TAT', 'TCT', 'GTT', 'CCT', 'ATT', 'ATA', 'TGG', 'TTT', 'ATG', 'TGT', 'GCA', 'TTC', 'TAT', 'GCT', 'TTA', 'TTA', 'TGG', 'ATT', 'GGA', 'TGT', 'CAA', 'TTA', 'CCA', 'CAA', 'GAT', 'ATA', 'TTC', 'ATT', 'TTA', 'TAT', 'GGT', 'CGA', 'TTA', 'TTT', 'ATT', 'GTA', 'TTA', 'TTT', 'TTC', 'TGT', 'AGT', 'GGT', 'TTA', 'TTT', 'GTA', 'CTT', 'GTT', 'CAT', 'TAT', 'AGA', 'CGA', 'ACA', 'CAT', 'TAT', 'GAT', 'TAC', 'AGC', 'TCC', 'CAA', 'GCA', 'AAC', 'ATA', 'TAA']
	Total codons in first sequence: [0, 1, 0, 1, 2, 0, 0, 1, 4, 2, 24, 3, 6, 3, 1, 0, 1, 8, 1, 12, 1, 0, 0, 2, 3, 3, 11, 0, 8, 1, 3, 1, 0, 18, 0, 5, 35, 4, 8, 2, 2, 0, 0, 1, 2, 2, 0, 2, 1, 3, 0, 0, 1, 3, 1, 1, 5, 1, 18, 1, 4, 1, 1, 4]
	Total codons in last sequence: [11, 0, 0, 6, 4, 0, 0, 0, 6, 0, 10, 5, 8, 0, 7, 0, 0, 11, 0, 3, 10, 1, 0, 11, 8, 3, 22, 2, 20, 5, 3, 0, 0, 43, 4, 0, 7, 8, 27, 7, 6, 0, 1, 13, 10, 6, 0, 2, 2, 5, 0, 0, 1, 7, 0, 0, 10, 10, 19, 7, 9, 1, 1, 15] 

	Total codons summed from all sequences: [34600, 8706, 4464, 33748, 10048, 1784, 1189, 12461, 66086, 18061, 510477, 82721, 230736, 36169, 63636, 9650, 15309, 99072, 42704, 251933, 48727, 11501, 5561, 51422, 85490, 14405, 149181, 26060, 208128, 36153, 43726, 6224, 7483, 195839, 25080, 89123, 395963, 90724, 151076, 29578, 32363, 3942, 8566, 37383, 84370, 60743, 12495, 16194, 21218, 68547, 773, 1523, 4418, 43848, 15648, 19895, 89962, 20607, 210139, 25907, 62750, 19899, 10044, 64782]
	Printed out output file 1 named as Pfalciparum3d7_plasmodb6.1_broad_CDS.fasta.total_codons, containing total counts of codons 
	Printed out output file 2 named as Pfalciparum3d7_plasmodb6.1_broad_CDS.fasta.paired_codons, containing total pairs of codons


4096
3905

R version 3.0.2 (2013-09-25) -- "Frisbee Sailing"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

During startup - Warning message:
Setting LC_CTYPE failed, using "C" 
> ### FROM FIXED merged AUTOCORRELATION COUNTS, get MATRIX ####
> 
> 	
> # Genetic code	
> ala=c('GCA','GCC','GCG','GCT')
> arg=c('CGA','CGC','CGG','CGT','AGA','AGG')
> asn=c('AAT','AAC')
> asp=c('GAT','GAC')
> cys=c('TGT','TGC')
> gln=c('CAG','CAA')
> glu=c('GAG','GAA')
> gly=c('GGT','GGG','GGC','GGA')
> his=c('CAT','CAC')
> ile=c('ATT','ATC','ATA')
> leu=c('CTT','TTG','CTG','CTC','TTA','CTA')
> lys=c('AAG','AAA')
> met=c('ATG')
> phe=c('TTT','TTC')
> pro=c('CCT','CCG','CCC','CCA')
> ser=c('AGT','TCT','TCG','AGC','TCC','TCA')
> ter=c('TAG','TGA','TAA')
> thr=c('ACT','ACG','ACC','ACA')
> trp=c('TGG')
> tyr=c('TAT','TAC')
> val=c('GTT','GTG','GTC','GTA')
> 
> 
> all_aa=c('GCA','GCC','GCG','GCT','CGA','CGC','CGG','CGT','AGA','AGG','AAT','AAC','GAT','GAC','TGT','TGC','CAG','CAA','GAG','GAA','GGT','GGG','GGC','GGA','CAT','CAC','ATT','ATC','ATA','CTT','TTG','CTG','CTC','TTA','CTA','AAG','AAA','ATG','TTT','TTC','CCT','CCG','CCC','CCA','AGT','TCT','TCG','AGC','TCC','TCA','TAG','TGA','TAA','ACT','ACG','ACC','ACA','TGG','TAT','TAC','GTT','GTG','GTC','GTA')
> all_aa.sorted<-sort(all_aa)
> 
> ## FUNCTIONS ##
> 
> from_codonFIXED_to_matrix_FINAL<-function(FILE) {
+ 	# Read data
+ 	data<-read.table(FILE)
+ 	matrix<-matrix(data[,3],ncol=64,nrow=64, byrow = TRUE)  # so 1st codon in rows; 2nd codon in columns !!!!!
+ 	colnames(matrix)<-all_aa.sorted
+ 	row.names(matrix)<-all_aa.sorted
+ 	# Reoder matrix to be by AA
+ 	matrix.ordered_rows<-matrix[all_aa,,drop=FALSE]
+ 	tmatrix<-t(matrix.ordered_rows)
+ 	tmatrix.ordered_rows<-tmatrix[all_aa,,drop=FALSE]
+ 	matrix.CLEAN<-t(tmatrix.ordered_rows)
+ 	# Remove stop codon rows and columns
+ 	matrix.FINAL<- matrix.CLEAN[-51:-53,-51:-53]
+ 	return(matrix.FINAL)
+ }
> 
> plot_matrix_levelplot<-function(mat,my_title) {
+ 	# Plot
+ 	library(latticeExtra)
+ 	x<-t(mat)
+ 	rgb.palette <- colorRampPalette(c("white","yellow","orange","red","darkred" ), space = "rgb")
+ 	levelplot(x,  
+ 	  	main=my_title,
+       	aspect = "fill",
+       	#scales = list(x = list(rot = 90)),
+       	scales=list(x=list(cex=0.5, rot = 90),y=list(cex=0.5)),
+       	colorkey = list(space = "right"),
+       	col.regions=rgb.palette(120), 
+      	#cuts=100, 
+       	#at=seq(0,0.01,0.0001),
+       	xlab="",
+      	ylab="")
+ } 
> 
> plot_matrix_sdev<-function(mat,my_title) {
+ 	# Plot
+ 	library(latticeExtra)
+ 	mat<-replace(mat, is.nan(mat),0)
+ 	x<-t(mat)
+ 	my_value<-round(max(abs(mat))+0.5)
+ 	my_step=my_value*2/100
+ 	rgb.palette <- colorRampPalette(c("red","black","green"), space = "rgb")
+ 	levelplot(x,  
+ 	  	main=my_title,
+       	aspect = "fill",
+       	#scales = list(x = list(rot = 90)),
+       	scales=list(x=list(cex=0.5, rot = 90),y=list(cex=0.5)),
+       	colorkey = list(space = "right"),
+       	col.regions=rgb.palette(120), 
+      	cuts=100, 
+       	at=seq(-my_value,my_value,my_step),
+       	xlab="",
+      	ylab="")
+ } 
> 
> from_obs_to_exp<-function(obs) {
+ 	exp<-obs
+ 	for (i in 1:dim(obs)[1]){
+ 		for (j in 1:dim(obs)[2]){ 
+ 			exp[i,j]<-(colSums(obs)[j]/sum(obs))*sum(obs)*(rowSums(obs)[i]/sum(obs))
+ 		}
+ 	}
+ 	return(exp)
+ }
> 
> from_obs_and_exp_to_sdev<-function(ala_obs,ala_exp) {
+ 	ala_sdev<-ala_obs
+ 	for (i in 1:dim(ala_obs)[1]){
+ 		for (j in 1:dim(ala_obs)[2]){ 
+ 			ala_sdev[i,j]<-(ala_obs[i,j]-ala_exp[i,j])/sqrt(ala_exp[i,j]*(1-colSums(ala_obs)[j]/sum(ala_obs)*rowSums(ala_obs)[i]/sum(ala_obs)))
+ 		}
+ 	}
+ 	return(ala_sdev)
+ }
> 
> from_obs_to_rscpu_way1<-function(ala_obs) {
+ 	ala_exp_prob<-ala_obs
+ 	my_dim<-dim(ala_obs)[1]*dim(ala_obs)[2]
+ 	for (i in 1:dim(ala_obs)[1]){
+ 		for (j in 1:dim(ala_obs)[2]){ 
+ 			ala_obs_prob<-ala_obs/sum(ala_obs)
+ 			ala_exp_prob[i,j]<-((colSums(ala_obs)[j]/sum(ala_obs))*(rowSums(ala_obs)[i]/sum(ala_obs)))			
+ 		}
+ 	}
+ 	ala_rscpu1<-ala_obs_prob/ala_exp_prob
+ 	return(ala_rscpu1)
+ }
> 
> from_obs_to_rscpu_way2<-function(ala_obs) {
+ 	ala_exp_prob<-ala_obs
+ 	my_dim<-dim(ala_obs)[1]*dim(ala_obs)[2]
+ 	for (i in 1:dim(ala_obs)[1]){
+ 		for (j in 1:dim(ala_obs)[2]){ 
+ 			ala_obs_prob<-ala_obs/sum(ala_obs)
+ 			ala_exp_prob[i,j]<-((colSums(ala_obs)[j]/sum(ala_obs))*(rowSums(ala_obs)[i]/sum(ala_obs)))			
+ 		}
+ 	}
+ 	ala_rscpu2<-ala_obs_prob/(1/my_dim)
+ 	return(ala_rscpu2)
+ }
> 
> 
> ########################################
> ### Load data and get OBS, EXP, SDEV
> ########################################
> 
> 
> matrix_obs<-from_codonFIXED_to_matrix_FINAL("Pfalciparum3d7_plasmodb6.1_broad_CDS.fasta.codon_counts.merged.FIXED")
> 
> # Expected
> matrix_exp<-from_obs_to_exp(matrix_obs)
> 
> # Sdev
> matrix_sdev<-from_obs_and_exp_to_sdev(matrix_obs,matrix_exp)
> 
> 
> # Plots
> pdf(file="Pfalciparum3d7_plasmodb6.1_broad_CDS.fasta.codon_counts.merged.FIXED_plots.pdf", height=7, width=7)
> plot_matrix_levelplot(matrix_obs,"OBS")
Loading required package: RColorBrewer
Loading required package: lattice
> plot_matrix_levelplot(matrix_exp,"EXP")
> plot_matrix_sdev(matrix_sdev,"SDEV")
> dev.off()
null device 
          1 
> 
> ########################################
> ### Subdivide By AA
> ########################################
> 
> ala_obs<-matrix_obs[1:4,1:4]
> arg_obs<-matrix_obs[5:10,5:10]
> gly_obs<-matrix_obs[21:24,21:24]
> ile_obs<-matrix_obs[27:29,27:29]
> leu_obs<-matrix_obs[30:35,30:35]
> pro_obs<-matrix_obs[41:44,41:44]
> ser_obs<-matrix_obs[45:50,45:50]
> thr_obs<-matrix_obs[51:54,51:54]
> val_obs<-matrix_obs[58:61,58:61]
> 
> ala_sdev<-from_obs_and_exp_to_sdev(ala_obs,from_obs_to_exp(ala_obs))
> arg_sdev<-from_obs_and_exp_to_sdev(arg_obs,from_obs_to_exp(arg_obs))
> gly_sdev<-from_obs_and_exp_to_sdev(gly_obs,from_obs_to_exp(gly_obs))
> ile_sdev<-from_obs_and_exp_to_sdev(ile_obs,from_obs_to_exp(ile_obs))
> leu_sdev<-from_obs_and_exp_to_sdev(leu_obs,from_obs_to_exp(leu_obs))
> pro_sdev<-from_obs_and_exp_to_sdev(pro_obs,from_obs_to_exp(pro_obs))
> ser_sdev<-from_obs_and_exp_to_sdev(ser_obs,from_obs_to_exp(ser_obs))
> thr_sdev<-from_obs_and_exp_to_sdev(thr_obs,from_obs_to_exp(thr_obs))
> val_sdev<-from_obs_and_exp_to_sdev(val_obs,from_obs_to_exp(val_obs))
> 
> write.table(as.vector(t(arg_sdev)), "Pfalciparum3d7_plasmodb6.1_broad_CDS.fasta.codon_counts.merged.FIXED_arg_sdev.vector.txt", row.names=F)
> 
> sink("Pfalciparum3d7_plasmodb6.1_broad_CDS.fasta.codon_counts.merged.FIXED_sdevs.txt",append=FALSE, split=FALSE)
> ala_sdev
> arg_sdev
> gly_sdev
> ile_sdev
> leu_sdev
> ser_sdev
> pro_sdev
> thr_sdev
> val_sdev
> sink()
> 
> 
> pdf(file="Pfalciparum3d7_plasmodb6.1_broad_CDS.fasta.codon_counts.merged.FIXED_plots_byAA.pdf", height=7, width=7)
> plot_matrix_sdev(ala_sdev,"Ala")
> plot_matrix_sdev(arg_sdev,"Arg")
> plot_matrix_sdev(gly_sdev,"Gly")
> plot_matrix_sdev(ile_sdev,"Ile")
> plot_matrix_sdev(leu_sdev,"Leu")
> plot_matrix_sdev(pro_sdev,"Pro")
> plot_matrix_sdev(ser_sdev,"Ser")
> plot_matrix_sdev(thr_sdev,"Thr")
> plot_matrix_sdev(val_sdev,"Val")
> dev.off()
null device 
          1 
> 
> 
> ########################################
> ### RSCPU --> P(obs)/P(exp)
> ########################################
> 
> ##Relative synonymous codon usage
> #RSCU(codon)= Obs frequency of codon(compared to total for that AA)/ Exp frequency of codon(compared to total for that AA).
> #Ex. Ala(AGC)= obs frequency/0.25
> 
> ##Relative synonumous codon pair usage
> #RSCU(codon pair) = Obs frequency of codon(compared to total for that AA)/ Exp frequency of codon(compared to total for that AA
> #Ex. Ala(AGC-AGC)= obs frequency/0.0625
> 
> ## Way 1 --> "real expected" based on the multiplication of the individual two codons
> ## Way 2 --> "mathematically expected", based on the equal probabilities of codons (Ex. 0.25*0.25 --> 0.0625)
> ########################################
> 
> #ala_rscpu1_matrix<-from_obs_to_rscpu_way1(ala_obs)
> #arg_rscpu1_matrix<-from_obs_to_rscpu_way1(arg_obs)
> #gly_rscpu1_matrix<-from_obs_to_rscpu_way1(gly_obs)
> #ile_rscpu1_matrix<-from_obs_to_rscpu_way1(ile_obs)
> #leu_rscpu1_matrix<-from_obs_to_rscpu_way1(leu_obs)
> #ser_rscpu1_matrix<-from_obs_to_rscpu_way1(ser_obs)
> #pro_rscpu1_matrix<-from_obs_to_rscpu_way1(pro_obs)
> #thr_rscpu1_matrix<-from_obs_to_rscpu_way1(thr_obs)
> #val_rscpu1_matrix<-from_obs_to_rscpu_way1(val_obs)
> 
> #ala_rscpu2_matrix<-from_obs_to_rscpu_way2(ala_obs)
> #arg_rscpu2_matrix<-from_obs_to_rscpu_way2(arg_obs)
> #gly_rscpu2_matrix<-from_obs_to_rscpu_way2(gly_obs)
> #ile_rscpu2_matrix<-from_obs_to_rscpu_way2(ile_obs)
> #leu_rscpu2_matrix<-from_obs_to_rscpu_way2(leu_obs)
> #ser_rscpu2_matrix<-from_obs_to_rscpu_way2(ser_obs)
> #pro_rscpu2_matrix<-from_obs_to_rscpu_way2(pro_obs)
> #thr_rscpu2_matrix<-from_obs_to_rscpu_way2(thr_obs)
> #val_rscpu2_matrix<-from_obs_to_rscpu_way2(val_obs)
> 
> all_rscpu1_matrix<-from_obs_to_rscpu_way1(matrix_obs)
> all_rscpu2_matrix<-from_obs_to_rscpu_way2(matrix_obs)
> 
> # Convert into appended vectors, to have one vector per species
> #ala_rscpu1_vector<-as.vector(t(ala_rscpu1_matrix))
> #arg_rscpu1_vector<-as.vector(t(arg_rscpu1_matrix))
> #gly_rscpu1_vector<-as.vector(t(gly_rscpu1_matrix))
> #ile_rscpu1_vector<-as.vector(t(ile_rscpu1_matrix))
> #leu_rscpu1_vector<-as.vector(t(leu_rscpu1_matrix))
> #ser_rscpu1_vector<-as.vector(t(ser_rscpu1_matrix))
> #pro_rscpu1_vector<-as.vector(t(pro_rscpu1_matrix))
> #thr_rscpu1_vector<-as.vector(t(thr_rscpu1_matrix))
> #val_rscpu1_vector<-as.vector(t(val_rscpu1_matrix))
> 
> #ala_rscpu2_vector<-as.vector(t(ala_rscpu2_matrix))
> #arg_rscpu2_vector<-as.vector(t(arg_rscpu2_matrix))
> #gly_rscpu2_vector<-as.vector(t(gly_rscpu2_matrix))
> #ile_rscpu2_vector<-as.vector(t(ile_rscpu2_matrix))
> #leu_rscpu2_vector<-as.vector(t(leu_rscpu2_matrix))
> #ser_rscpu2_vector<-as.vector(t(ser_rscpu2_matrix))
> #pro_rscpu2_vector<-as.vector(t(pro_rscpu2_matrix))
> #thr_rscpu2_vector<-as.vector(t(thr_rscpu2_matrix))
> #val_rscpu2_vector<-as.vector(t(val_rscpu2_matrix))
> 
> library("gdata")
perl: warning: Setting locale failed.
perl: warning: Please check that your locale settings:
	LANGUAGE = (unset),
	LC_ALL = (unset),
	LC_CTYPE = "UTF-8",
	LANG = "en_US.UTF-8"
    are supported and installed on your system.
perl: warning: Falling back to the standard locale ("C").
gdata: read.xls support for 'XLS' (Excel 97-2004) files ENABLED.

gdata: Unable to load perl libaries needed by read.xls()
gdata: to support 'XLSX' (Excel 2007+) files.

gdata: Run the function 'installXLSXsupport()'
gdata: to automatically download and install the perl
gdata: libaries needed to support Excel XLS and XLSX formats.

Attaching package: 'gdata'

The following object is masked from 'package:stats':

    nobs

The following object is masked from 'package:utils':

    object.size

> all_rscpu1_vector<-unmatrix(all_rscpu1_matrix, byrow=FALSE)
> all_rscpu2_vector<-unmatrix(all_rscpu2_matrix, byrow=FALSE)
> 
> 
> #Pfalciparum3d7_plasmodb6.1_broad_CDS.fasta.codon_counts.merged.FIXED<-c(ala_rscpu1_vector, arg_rscpu1_vector, gly_rscpu1_vector, ile_rscpu1_vector, leu_rscpu1_vector, ser_rscpu1_vector, pro_rscpu1_vector, thr_rscpu1_vector, val_rscpu1_vector)  # all_all_vector
> Pfalciparum3d7_plasmodb6.1_broad_CDS.fasta.codon_counts.merged.FIXED<-c(all_rscpu1_vector)
> write.table(data.frame(Pfalciparum3d7_plasmodb6.1_broad_CDS.fasta.codon_counts.merged.FIXED), "Pfalciparum3d7_plasmodb6.1_broad_CDS.fasta.codon_counts.merged.FIXED_rscpu_vector_way1.txt", row.names=T,quote=FALSE)
> 
> #Pfalciparum3d7_plasmodb6.1_broad_CDS.fasta.codon_counts.merged.FIXED<-c(ala_rscpu2_vector, arg_rscpu2_vector, gly_rscpu2_vector, ile_rscpu2_vector, leu_rscpu2_vector, ser_rscpu2_vector, pro_rscpu2_vector, thr_rscpu2_vector, val_rscpu2_vector)  # all_all_vector
> Pfalciparum3d7_plasmodb6.1_broad_CDS.fasta.codon_counts.merged.FIXED<-c(all_rscpu2_vector)
> write.table(data.frame(Pfalciparum3d7_plasmodb6.1_broad_CDS.fasta.codon_counts.merged.FIXED), "Pfalciparum3d7_plasmodb6.1_broad_CDS.fasta.codon_counts.merged.FIXED_rscpu_vector_way2.txt", row.names=T, quote=FALSE)
> 
> 
